9 9
5 3 0 0 7 0 0 0 0
6 0 0 1 9 5 0 0 0
0 9 8 0 0 0 0 6 0
8 0 0 0 6 0 0 0 3
4 0 0 8 0 3 0 0 1
7 0 0 0 2 0 0 0 6
0 6 0 0 0 0 2 8 0
0 0 0 4 1 9 0 0 5
0 0 0 0 8 0 0 7 9

Testing was done by incremental steps at specific locations within the Solver.java class.
 After correcting all compile time errors, information about the number of values set, 
 the solution technique used when Cell objects values were set, and the grid array itself 
 was printed to the console, among other things. The logic errors were not apparent at
 first and took a majority of the debugging time to fix.

  I plan on incorporating more solution techniques to this project in the future as I
 continue to develop it, in order to be able to solve more advanced Sudoku puzzles.
 With the addition or two more of these new solution techniques, my focus will move
 towards increasing the speed of this Sudoku Sovler. The rows, columns, and subgrids 
 of the grid array can be contained in a priority list and they would be indexed 
 according to the number of Cell values already set within each of them. Rows, columns, 
 or subgrids with closer to 8 known values can be solved faster than those with 
 less known values.