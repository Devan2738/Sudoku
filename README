****************
* Sudoku Solver (Java programming language)
* Devan Karsann
**************** 

OVERVIEW:

 This program reads in values of a Sudoku puzzle from a text file and
 sets the values of Cell objects which are part of a two-dimensional
 array. This array represents the Sudoku puzzle. Two techniques are 
 used to find and set the values of unknown numbers in the Sudoku puzzle. 
 This program can solve easy and medium Sudoku puzzles with no errors, 
 but cannot currently solve advanced Sudoku puzzles due to more complex 
 solution techniques which would need to be developed and included. 
 This program is an ongoing project and these additional solution 
 techniques will be pursued.

 
INCLUDED FILES:

 * Cell.java - source file
 * Solver.java - source file
 * README - this file
 * SampleInput1.txt
 * SampleInput2.txt
 * SampleInput3.txt
 * SampleInput4.txt
 * SampleInput5.txt
 * SampleInput6.txt
 * SampleInput7.txt
 
 // It should be noted that SampleInput7.txt was included as an example 
    of a puzzle this Sudoku Solver cannot solve. All other text files 
    can be read and solved with no errors.
 
 // Text files which are to be solved should be formatted according to the 
    following example('0' represents an unknown value):
 
   9 9
   5 3 0 0 7 0 0 0 0
   6 0 0 1 9 5 0 0 0
   0 9 8 0 0 0 0 6 0
   8 0 0 0 6 0 0 0 3
   4 0 0 8 0 3 0 0 1
   7 0 0 0 2 0 0 0 6
   0 6 0 0 0 0 2 8 0
   0 0 0 4 1 9 0 0 5
   0 0 0 0 8 0 0 7 9

   
COMPILING AND RUNNING:

 This program can be run from within an IDE (Integrated Development Environment)
 which accommodates the Java programming language, or from the command line.
 If using an IDE, confirm that the run configurations include a program argument,
 which needs to be the name of a provided text file in this directory or a text
 file created by the user which is formatted according the specifications found
 in the Included Files section of this document.
 
 The following instructions are for command-line instructions for a Linux system.
 
 From the directory containing all source files, compile the
 driver class (and all dependencies) with the command:
 $ javac *.java

 Run the Solver class file with the command:
 $ java Solver SampleInput1.txt
 
 // 'SampleInput1.txt' can be replaced with the name of another text file provided
 // by this project or a text file created by the user which is formatted according 
 // the specifications found in the Included Files section of this document.

 Console output will give the results after the program finishes.


PROGRAM DESIGN AND IMPORTANT CONCEPTS:

 This program reads specifically formatted text files which are based on 
 unsolved Sudoku puzzles. The Sudoku puzzle is then solved and the solution
 os printed to the console.

 Several Sudoku puzzles were solved by only using the 'first solution technique,'
 as labeled within the Solver.java class. This technique set a Cell object value 
 if there was a single number from 1 to 9 missing in the union of Cell object values
 from the same row, column, or subgrid as a Cell object. The Sudoku puzzles which
 were solved with only this method were considered easy.
 
 In order to solve the medium difficulty Sudoku puzzles, the 'second solution
 technique' was added to the main method in the Solver.java class. This technique
 differed from the first because it checked the numbers which were not possible in 
 the same subgrid as a Cell object.
 
 Solving a more advanced Sudoku puzzle was attempted, which is included in this
 project as SampleInput7.txt, but the current two solution techniques were not 
 sufficient enough to solve this puzzle.
 
 More solution techniques will be researched and added to this program to make 
 it possible for even the most advanced Sudoku puzzles to be solved.
 
 Explain the main concepts and organization of your program so that
 the reader can understand how your program works. This is not a repeat
 of javadoc comments or an exhaustive listing of all methods, but an
 explanation of the critical algorithms and object interactions that make
 up the program.

 After all Sudoku puzzles of dimension 9x9 can be solved with this program,
 the efficiency of the solution techniques will be increased. Then, options for
 solving Sudoku puzzles of other dimension, such as 10x10, 14x14, will be added.

 
TESTING:

 Testing was done by incremental steps at specific locations within the Solver.java class.
 After correcting all compile time errors, information about the number of values set, 
 the solution technique used when Cell objects values were set, and the grid array itself 
 was printed to the console, among other things. The logic errors were not apparent at
 first and took a majority of the debugging time to fix.

 
DISCUSSION:
 
 I plan on incorporating more solution techniques to this project in the future as I
 continue to develop it, in order to be able to solve more advanced Sudoku puzzles.
 With the addition or two more of these new solution techniques, my focus will move
 towards increasing the speed of this Sudoku Sovler. The rows, columns, and subgrids 
 of the grid array can be contained in a priority list and they would be indexed 
 according to the number of Cell values already set within each of them. Rows, columns, 
 or subgrids with closer to 8 known values can be solved faster than those with 
 less known values.
 
