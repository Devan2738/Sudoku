*********************************************
 * Sudoku Solver (Java programming language)
 * Devan Karsann
*********************************************


OVERVIEW:

 This program reads in known values of a Sudoku puzzle from a text file and sets the values of Cell objects within a two-dimensional 
 Cell array to the input values. This array represents the simulated Sudoku puzzle. A combination of solution techniques are used to 
 find and set the  values of unknown numbers in the Sudoku puzzle. The solution steps used by this program and the possible values at 
 the beginning of each new iteration of the solution techniques is printed to solutionSteps.
 
INCLUDED FILES:

 * Cell.java - source file
 * Solver.java - source file
 * README - this file
 * SampleInput1.txt
 * SampleInput2.txt
 * SampleInput3.txt
 * SampleInput4.txt
 * SampleInput5.txt
 * solutionSteps
 
 // Text files which are to be solved should be formatted according to the following example 
    ('0' represents an unknown value):
 
   9 9
   5 3 0 0 7 0 0 0 0
   6 0 0 1 9 5 0 0 0
   0 9 8 0 0 0 0 6 0
   8 0 0 0 6 0 0 0 3
   4 0 0 8 0 3 0 0 1
   7 0 0 0 2 0 0 0 6
   0 6 0 0 0 0 2 8 0
   0 0 0 4 1 9 0 0 5
   0 0 0 0 8 0 0 7 9

   
COMPILING AND RUNNING:

 This program can be run from within an IDE (Integrated Development Environment) which accommodates the Java programming language, 
 or from the command line. If using an IDE, confirm that the run configurations include a program argument, which needs to be the 
 name of a provided text file in this project, or a text file created by the user which is formatted according the specifications 
 found above in the 'INCLUDED FILES' section of this document.
 
 The following instructions are for command-line instructions in a Linux system.
 
 From the directory containing all source files, compile both classes with the command:
 $ javac *.java

 Run the Solver class file with this command:
 $ java Solver SampleInput1.txt
 
 // 'SampleInput1.txt' can be replaced with the name of another text file provided
 // by this project or a text file created by the user which is formatted according 
 // the specifications found in the 'INCLUDED FILES' section of this document.

 After the Sudoku puzzle is solved, information about the original and completed
 puzzle will be printed to the console. Maximum calculation time is around 5 seconds.
 Most puzzles are solved in 1 second.


PROGRAM DESIGN AND IMPORTANT CONCEPTS:

 This program reads specifically formatted text files which represent unsolved Sudoku puzzles. This Sudoku puzzle is then solved 
 and the solution is printed to the console. Additional solution techniques were researched and added to this program to make it 
 possible for advanced Sudoku puzzles to be solved. 
 
 This program can solve any correctly entered Sudoku puzzle with the additional solution solution techniques recently incorporated. 
 When necessary, guesses are made and logged. In the event of an incorrect guess being made the previous state of the Sudoku puzzle 
 before the guess is loaded from memory and the incorrect value is taken out of the domain of possible values for its respective cell.

 
TESTING:

 After correcting all compile time errors, testing was done by incremental steps at 
 specific locations within the Solver.java class. Information about the number of values set, 
 the solution technique used, and the values in the grid array were printed to the console, 
 among other things. The logic errors took a majority of the debugging time to find and fix.
 To get past these errors, a solutionsSteps file was used. This logged all of the steps the 
 algorithm was going through to solve the puzzle as well as the possible values for all cells.

 
DISCUSSION:
 
 I'm content with the current state of this programming project. It began in fall 2016 when I was less experienced
 with data structures and methods in Java. As my knowledge of Java grew and debugging skills developed, I was able
 to complete my goal of having a super smart Sudoku solver. The use of the solutionSteps log file helped tremendously.
 My future plans for extracurricular projects include a dynamic foreign lanugage journal system and an AI that plays chess.

 
 
 
