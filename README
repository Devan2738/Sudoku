*********************************************
 * Sudoku Solver (Java programming language)
 * Devan Karsann
*********************************************


OVERVIEW:

 This program reads in known values of a Sudoku puzzle from a text file and sets the values of Cell objects within a two-dimensional Cell array to the input values. This array represents the simulated Sudoku puzzle. A combination of solution techniques are used to find and set the  values of unknown numbers in the Sudoku puzzle. The solution steps used by this program and the possible values at the beginning of each new iteration of the solution techniques is printed to solutionSteps.
 
INCLUDED FILES:

 * Cell.java - source file
 * Solver.java - source file
 * README - this file
 * sampleInput1 - 10-12 minutes is required for calculating a solution
 * sampleInput2 - 1-2 minutes is required for calculating a solution
 * solutionSteps
 
 Text files which are to be solved should be formatted according to the following example. Other dimensions of Sudoku puzzles can be used, such as 16x16.

 ('0' represents an unknown value):
 
   9 9
   5 3 0 0 7 0 0 0 0
   6 0 0 1 9 5 0 0 0
   0 9 8 0 0 0 0 6 0
   8 0 0 0 6 0 0 0 3
   4 0 0 8 0 3 0 0 1
   7 0 0 0 2 0 0 0 6
   0 6 0 0 0 0 2 8 0
   0 0 0 4 1 9 0 0 5
   0 0 0 0 8 0 0 7 9

   16 16
   0   2  3  0  5  0 14  0 10  0 15  0  0  0 16  0
   0  11 16  0  0  0  0  0  0  0  0  6  0  0  0 12
   6   0  0  8  0 11 16  0  0  9  0  0  4  2  0  5
   0   5  0  0  0  0  0  0  2 11  8 16  0  0 10  0
   2   9  8 14  6  0  0  1  0  0  0  7 15  0  0 10
   16  4  0  5  0  8 10  0  6 15  1 12  0  0  0  9
   0   0  7 12  0 14  0 16  5  0  0 10  0  0  0  0
   3  15  0 10  4  0  0  0  0  2  0  0 16  0 12  0
   0   3  0  4  0  0  9  0  0  0  0 14  8  0  6  2
   0   0  0  0 14  0  0  6 11  0  2  0 12  7  0  0
   12  0  0  0 16 10  1  4  0 13  9  0  3  0 11 15
   15  0  0 16  8  0  0  0  7  0  0  3  1  9 13  4
   0  16  0  0  7  1  6 13  0  0  0  0  0  0  2  0
   7  0  14  6  0  0  5  0  0 16  4  0 13  0  0  8
   8  0   0  0 15  0  0  0  0  0  0  0  0  3  1  0
   0  13  0  0  0  2  0 10  0  5  0 11  0 16  4  0

COMPILING AND RUNNING:

 This program can be run from within an IDE (Integrated Development Environment) which accommodates the Java programming language, or from the command line. If using an IDE, confirm that the run configurations include a program argument, which needs to be the name of a provided text file in this project, or a text file created by the user which is formatted according the specifications found above in the 'INCLUDED FILES' section of this document.
 
 The following instructions are for command-line instructions in a Linux system.
 
 From the directory containing all source files, compile both classes with the command:
 $ javac *.java

 Run the Solver class file with this command:
 $ java Solver SampleInput1.txt

 After the Sudoku puzzle is solved, information about the original and completed puzzle will be printed to the console. Sudoku puzzles with the dimenion of 9x9 can be solved in several seconds. 


PROGRAM DESIGN AND IMPORTANT CONCEPTS:

 This program reads specifically formatted text files which represent unsolved Sudoku puzzles. This Sudoku puzzle is then solved and the solution is printed to the console. Additional solution techniques were researched and added to this program to make it possible for advanced Sudoku puzzles to be solved. 
 
 This program can solve any correctly entered Sudoku puzzle with the additional solution solution techniques recently incorporated. When necessary, guesses are made and logged. In the event of an incorrect guess being made the previous state of the Sudoku puzzle before the guess is loaded from memory and the incorrect value is taken out of the domain of possible values for its respective cell.

 
TESTING:

 After correcting all compile time errors, testing was done by incremental steps at specific locations within the Solver.java class. Information about the number of values set, the solution technique used, and the values in the grid array were printed to the console, among other things. The logic errors took a majority of the debugging time to find and fix. To get past these errors, a solutionsSteps file was used. This logged the steps the algorithm was going through to solve the puzzle as well as the possible values for all cells.